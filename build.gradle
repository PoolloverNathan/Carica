import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
	id 'fabric-loom' version '1.5-SNAPSHOT'
	id 'maven-publish'
 	id "org.jetbrains.kotlin.jvm" version "1.9.22"
	id "io.freefair.sass-java" version "8.6"
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.

	maven { url = 'https://maven.terraformersmc.com/releases/' }
	maven { url = 'https://api.modrinth.com/maven' }
	maven { url 'https://maven.quiltmc.org/repository/release/' }
	maven {
		name = "Figura Maven Release"
		url = uri("https://maven.figuramc.org/releases")
	}
	maven {
		name = "Figura Maven Snapshots"
		url = uri("https://maven.figuramc.org/snapshots")
	}
	maven { url 'https://jitpack.io' }
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
//	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	mappings loom.layered {
		mappings "org.quiltmc:quilt-mappings:$minecraft_version+build.$quilt_version:intermediary-v2"
		officialMojangMappings()
	}
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}+$minecraft_version"
	modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"
	// Uncomment the following line to enable the deprecated Fabric API modules. 
	// These are included in the Fabric API production distribution and allow you to update your mod to the latest modules at a later more convenient time.

	// modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}"

	implementation "com.github.FiguraMC.luaj:luaj-core:$luaj-figura"
	implementation "com.github.FiguraMC.luaj:luaj-jse:$luaj-figura"
	implementation "com.neovisionaries:nv-websocket-client:$nv_websocket"

	modImplementation "org.figuramc:figura-fabric:$figura_version+$minecraft_version"

	 implementation "org.jetbrains.kotlinx:kotlinx-html-jvm:$kotlinx_html_version"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand([
			"id": project.mod_id,
			"version": project.version
		])
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release.set(17)
}

tasks.withType(KotlinCompile).configureEach {
	//noinspection GrDeprecatedAPIUsage - TODO: find replacement
	kotlinOptions {
		jvmTarget = 17
	}
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		//noinspection GroovyAssignabilityCheck - TODO: figure out how to fix
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}